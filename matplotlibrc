### MATPLOTLIBRC FORMAT

# This is a sample matplotlib configuration file.  It should be placed
# in HOME/.matplotlib/matplotlibrc (unix/linux like systems) and
# C:\Documents and Settings\yourname\.matplotlib (win32 systems)
#
# By default, the installer will overwrite the existing file in the
# install path, so if you want to preserve your's, please move it to
# your HOME dir and set the environment variable if necessary.
#
# This file is best viewed in a editor which supports python mode
# syntax highlighting
#
# Blank lines, or lines starting with a comment symbol, are ignored,
# as are trailing comments.  Other lines must have the format
#
#   key : val   # optional comment
#
# Colors: for the color values below, you can either use
#  - a matplotlib color string, such as r, k, or b
#  - an rgb tuple, such as (1.0, 0.5, 0.0)
#  - a hex string, such as ff00ff  (no '#' symbol)
#  - a scalar grayscale intensity such as 0.75
#  - a legal html color name, eg red, blue, darkslategray

#### CONFIGURATION BEGINS HERE
## The default backend.  If you omit this parameter, the first working
## backend from the following list is used:
##     MacOSX Qt5Agg Gtk3Agg TkAgg WxAgg Agg
## Other choices include:
##     Qt5Cairo GTK3Cairo TkCairo WxCairo Cairo
##     Qt4Agg Qt4Cairo Wx  # deprecated.
##     PS PDF SVG Template
## You can also deploy your own backend outside of matplotlib by referring to
## the module name (which must be in the PYTHONPATH) as 'module://my_backend'.
# backend      : TkAgg
backend	       : MacOSX
interactive  : True      # see http://matplotlib.sourceforge.net/interactive.html
#toolbar      : toolbar2   # None | classic | toolbar2
#timezone     : UTC        # a pytz timezone string, eg US/Central or Europe/Paris

# Where your matplotlib data lives if you installed to a non-default
# location.  This is where the matplotlib fonts, bitmaps, etc reside
#datapath : /home/jdhunter/mpldata


### LINES
# See http://matplotlib.sourceforge.net/matplotlib.lines.html for more
# information on line properties.
#lines.linewidth   : 1.0     # line width in points
#lines.linestyle   : -       # solid line
#lines.color       : blue
#lines.marker      : None    # the default marker
lines.markeredgewidth  : 1.5     # the line width around the marker symbol
#lines.markersize  : 6            # markersize, in points
#lines.dash_joinstyle : miter        # miter|round|bevel
#lines.dash_capstyle : butt          # butt|round|projecting
#lines.solid_joinstyle : miter       # miter|round|bevel
#lines.solid_capstyle : projecting   # butt|round|projecting
#lines.antialiased : True         # render lines in antialised (no jaggies)

### PATCHES
# Patches are graphical objects that fill 2D space, like polygons or
# circles.  See
# http://matplotlib.sourceforge.net/matplotlib.patches.html for more
# information on patch properties
#patch.linewidth   	: 1.0     # edge width in points
#patch.facecolor  	: blue
#patch.edgecolor  	: black
#patch.antialiased 	: True    # render patches in antialised (no jaggies)

### FONT
#
# font properties used by text.Text.  See
# http://matplotlib.sourceforge.net/matplotlib.font_manager.html for more
# information on font properties.  The 6 font properties used for font
# matching are given below with their default values.
#
# The font.family property has five values: 'serif' (e.g. Times),
# 'sans-serif' (e.g. Helvetica), 'cursive' (e.g. Zapf-Chancery),
# 'fantasy' (e.g. Western), and 'monospace' (e.g. Courier).  Each of
# these font families has a default list of font names in decreasing
# order of priority associated with them.
#
# The font.style property has three values: normal (or roman), italic
# or oblique.  The oblique style will be used for italic, if it is not
# present.
#
# The font.variant property has two values: normal or small-caps.  For
# TrueType fonts, which are scalable fonts, small-caps is equivalent
# to using a font size of 'smaller', or about 83% of the current font
# size.
#
# The font.weight property has effectively 13 values: normal, bold,
# bolder, lighter, 100, 200, 300, ..., 900.  Normal is the same as
# 400, and bold is 700.  bolder and lighter are relative values with
# respect to the current weight.
#
# The font.stretch property has 11 values: ultra-condensed,
# extra-condensed, condensed, semi-condensed, normal, semi-expanded,
# expanded, extra-expanded, ultra-expanded, wider, and narrower.  This
# property is not currently implemented.
#
# The font.size property is the default font size for text, given in pts.
# 12pt is the standard value.
#
font.family         : sans
font.style          : normal
font.variant        : normal
# font.weight         : normal
font.weight         : normal
# use 500 if you want to use the $\star$ or other symbols that crash.
font.stretch        : normal
# note that font.size controls default text sizes.  To configure
# special text sizes tick labels, axes, labels, title, etc, see the rc
# settings for axes and ticks. Special text sizes can be defined
# relative to font.size, using the following values: xx-small, x-small,
# small, medium, large, x-large, xx-large, larger, or smaller
font.size           : 16.0
font.serif          : Tex Gyre Pagella, Tex Gyre Schola, Tex Gyre Termes, STIXGeneral, CMU Serif, Latin Modern Roman, Dejavu Serif, serif
# MBK: Tex Gyre Bonum is not so good. Need to decide between Pagella, Schola, Termes, all of which are able to do bold TeX symbols (e.g., \star).
font.sans-serif     : Helvetica, Arial, Verdana, DejaVu Sans, Lucida Grande, Bitstream Vera Sans, Geneva, Gill Sans, Lucid, Avant Garde, sans-serif
font.cursive        : Apple Chancery, Textile, Zapf Chancery, Sand, cursive
font.fantasy        : Comic Sans MS, Chicago, Charcoal, Impact, Western, fantasy
font.monospace      : Andale Mono, Bitstream Vera Sans Mono, Nimbus Mono L, Courier New, Courier, Fixed, Terminal, monospace

### TEXT
# text properties used by text.Text.  See
# http://matplotlib.sourceforge.net/matplotlib.text.html for more
# information on text properties

#text.color          : black
text.usetex         : False  # use latex for all text handling.  For more information, see
                             # http://www.scipy.org/Wiki/Cookbook/Matplotlib/UsingTex
# text.latex.preamble : \usepackage{bm}
# text.latex.preamble : \usepackage{sfmath} \boldmath
# text.dvipnghack     : True  # some versions of dvipng don't handle
                             # alpha channel properly.  Use True to correct and flush
                             # ~/.matplotlib/tex.cache before testing


# The following settings allow you to select the fonts in math mode.
# They map from a TeX font name to a fontconfig font pattern.
# These settings are only used if mathtext.fontset is 'custom'.
# Note that this "custom" mode is unsupported and may go away in the
# future.
mathtext.cal : cursive
mathtext.rm  : sans
mathtext.tt  : monospace
mathtext.it  : sans:italic
mathtext.bf  : sans:bold
mathtext.sf  : sans
# MBK: switch mathtext.fontset back to cm in general (?)
mathtext.fontset: custom  # Should be 'dejavusans' (default),
                               # 'dejavuserif', 'cm' (Computer Modern), 'stix',
                               # 'stixsans' or 'custom' (unsupported, may go
                               # away in the future)
mathtext.fallback : cm  # When True, use symbols from the Computer Modern
                              #  fonts when a symbol can not be found in one of
                              #  the custom math fonts.

mathtext.default : it # The default font to use for math.
                       # Can be any of the LaTeX font names, including
                       # the special name "regular" for the same font
                       # used in regular text.



### AXES
# default face and edge color, default tick sizes,
# default fontsizes for ticklabels, and so on.  See
# http://matplotlib.sourceforge.net/matplotlib.axes.html#Axes
#axes.hold           : True    # whether to clear the axes by default on
#axes.facecolor      : white   # axes background color
#axes.edgecolor      : black   # axes edge color
axes.linewidth      : 2.0     # edge linewidth
#axes.grid           : False   # display grid or not
#axes.titlesize      : 14      # fontsize of the axes title
axes.labelsize      : 18      # fontsize of the x and y labels
axes.labelweight    : normal  # weight of the x and y labels
#axes.labelcolor     : black
#axes.axisbelow      : False   # whether axis gridlines and ticks are below
                              # the axes elements (lines, text, etc)
axes.formatter.use_mathtext : True
axes.formatter.min_exponent: 3 
axes.formatter.limits : -5, 5 # use scientific notation if log10
                               # of the axis range is smaller than the
                               # first or larger than the second
axes.formatter.useoffset      : False    # If True, the tick label formatter
                                         # will default to labeling ticks relative
                                         # to an offset when the data range is
                                         # small compared to the minimum absolute
                                         # value of the data.
axes.formatter.offset_threshold : 4     # When useoffset is True, the offset
                                         # will be used when it can remove
                                         # at least this number of significant
                                         # digits from tick labels.
# axes.unicode_minus  : True    # use unicode for the minus symbol
                               # rather than hypen.  See http://en.wikipedia.org/wiki/Plus_sign#Plus_sign
# axes.color_cycle    : k, m, Gray, c, b, r, y, g  # color cycle for plot lines
                                            # as list of string colorspecs:
                                            # single letter, long name, or
                                            # web-style hex

axes.prop_cycle     : cycler('color', ['k', 'm', 'Gray', 'c', 'b', 'r', 'y', 'g'])
polaraxes.grid      : True    # display grid on polar axes

### TICKS
# see http://matplotlib.sourceforge.net/matplotlib.axis.html#Ticks
# xtick.major.size     : 5      # major tick size in points
# xtick.minor.size     : 3      # minor tick size in points
# xtick.major.size     : 6.5      # major tick size in points
xtick.top            : True   # draw ticks on the top side
xtick.bottom         : True   # draw ticks on the bottom side
xtick.major.size     : 7.0      # major tick size in points
xtick.minor.size     : 3.5      # minor tick size in points
xtick.major.width    : 1.5    # major tick width in points
xtick.minor.width    : 1.5    # minor tick width in points
xtick.major.pad      : 6      # distance to major tick label in points
#xtick.minor.pad      : 4      # distance to the minor tick label in points
#xtick.color          : k      # color of the tick labels
xtick.labelsize      : 16     # fontsize of the tick labels
xtick.direction      : in     # direction: in or out

# ytick.major.size     : 5      # major tick size in points
# ytick.minor.size     : 3      # minor tick size in points
# ytick.major.size     : 6.5      # major tick size in points
ytick.left           : True   # draw ticks on the left side
ytick.right          : True  # draw ticks on the right side
ytick.major.size     : 7      # major tick size in points
ytick.minor.size     : 3.5      # minor tick size in points
ytick.major.width    : 1.5    # major tick width in points
ytick.minor.width    : 1.5    # minor tick width in points
ytick.major.pad      : 6      # distance to major tick label in points
#ytick.minor.pad      : 4      # distance to the minor tick label in points
#ytick.color          : k      # color of the tick labels
ytick.labelsize      : 16     # fontsize of the tick labels
ytick.direction      : in     # direction: in or out


### GRIDS
#grid.color       :   black   # grid color
#grid.linestyle   :   :       # dotted
#grid.linewidth   :   0.5     # in points

### Legend
#legend.isaxes        : True
legend.numpoints     : 1      # the number of points in the legend line
legend.scatterpoints : 1        # number of scatter points
legend.fontsize      : 16
legend.borderpad           : 0.25    # the fractional whitespace inside the legend border
legend.markerscale   : 1.0    # the relative size of legend markers vs. original
# the following dimensions are in axes coords
legend.labelspacing:  0.25  # the vertical space between the legend entries
legend.handlelength     : 2.5   # the length of the legend lines
# legend.handletextpad : 0.25   # the space between the legend line and legend text
legend.handletextpad : 0.6   # the space between the legend line and legend text
legend.borderaxespad       : 0.5   # the border between the axes and legend edge
#legend.shadow        : False

### FIGURE
# See http://matplotlib.sourceforge.net/matplotlib.figure.html#Figure
figure.figsize   : 6, 6    # figure size in inches
figure.dpi	: 80   # figure dots per inch
figure.facecolor : 0.75    # figure facecolor; 0.75 is scalar gray
figure.edgecolor : white   # figure edgecolor

# The figure subplot parameters.  All dimensions are fraction of the
# figure width or height
#figure.subplot.left  : 0.125  # the left side of the subplots of the figure
#figure.subplot.right : 0.9    # the right side of the subplots of the figure
#figure.subplot.bottom : 0.1   # the bottom of the subplots of the figure
#figure.subplot.top : 0.9      # the top of the subplots of the figure
#figure.subplot.wspace : 0.2   # the amount of width reserved for blank space between subplots
#figure.subplot.hspace : 0.2   # the amount of height reserved for white space between subplots


### IMAGES
image.aspect : equal             # equal | auto | a number
#image.interpolation  : bilinear  # see help(imshow) for options
image.cmap   : plasma               # gray | jet etc...
#image.lut    : 256               # the size of the colormap lookup table
image.origin : lower             # lower | upper


### CONTOUR PLOTS
#contour.negative_linestyle :  6.0, 6.0 # negative contour dashstyle (size in points)
contour.negative_linestyle :  dashed # dashed | solid

### SAVING FIGURES
# the default savefig params can be different for the GUI backends.
# Eg, you may want a higher resolution, or to make the figure
# background white
savefig.dpi       : 200      # figure dots per inch
savefig.facecolor : white    # figure facecolor when saving
savefig.edgecolor : white    # figure edgecolor when saving
savefig.transparent : True   # setting that controls whether figures are
		      	     # saved with a transparent background by default  
savefig.bbox        : tight  # 'tight' or 'standard'.
                             # 'tight' is incompatible with pipe-based animation
                             # backends but will workd with temporary file based
			     # ones: e.g. setting animation.writer to ffmpeg
			     # will not work, use ffmpeg_file instead


# tk backend params
# tk.window_focus   : True    # Maintain shell focus for TkAgg

# ps backend params
#ps.papersize      : letter   # auto, letter, legal, ledger, A0-A10, B0-B10
ps.useafm         : True    # use of afm fonts, results in small files
#ps.usedistiller   : None    # can be: None, ghostscript or xpdf
                                          # Experimental: may produce smaller files.
                                          # xpdf intended for production of publication quality files,
                                          # but requires ghostscript, xpdf and ps2eps
#ps.distiller.res  : 6000      # dpi

# pdf backend params
#pdf.compression   : 6 # integer from 0 to 9
		      # 0 disables compression (good for debugging)
pdf.fonttype       : 3         # Output Type 3 (Type3) or Type 42 (TrueType)

# svg backend params
#svg.image_inline : True       # write raster image data directly into the svg file
#svg.image_noscale : False     # suppress scaling of raster data embedded in SVG

# Set the verbose flags.  This controls how much information
# matplotlib gives you at runtime and where it goes.  Ther verbosity
# levels are: silent, helpful, debug, debug-annoying.  Any level is
# inclusive of all the levels below it.  If you setting is debug,
# you'll get all the debug and helpful messages.  When submitting
# problems to the mailing-list, please set verbose to helpful or debug
# and paste the output into your report.
#
# The fileo gives the destination for any calls to verbose.report.
# These objects can a filename, or a filehandle like sys.stdout.
#
# You can override the rc default verbosity from the command line by
# giving the flags --verbose-LEVEL where LEVEL is one of the legal
# levels, eg --verbose-helpful.
#
# You can access the verbose instance in your code
#   from matplotlib import verbose.
#verbose.level  : silent      # one of silent, helpful, debug, debug-annoying
#verbose.fileo  : sys.stdout  # a log filename, sys.stdout or sys.stderr
